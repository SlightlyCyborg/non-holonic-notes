Summary of the [[https://orgmode.org/manual/External-links.htmlASDF][ASDF Manual]]

* Introduction

** 3 faces of ASDF
- users
- writers
- build-system-extenders
    
ASDF is not a tool library and system installation, only for building

* Quick start summary

** Simple Loading (without Quicklisp)
- (require "asdf")
- put code in ~/common-lisp/ or configure ASDF to find my systems*
- (asdf:load-system "holon")

** Make ASDF system
- make repository directory where ASDF can find it
- create <name>.asd
- (asdf:load-system "<name>")


* Loading ASDF
** Preinstalled ASDF
 ASDF is included with all major CL impls, so...

- (require "asdf")

It may be a good idea to load asdf in the common lisp startup script

** Check if ASDF is loaded
- (asdf:asdf-version)
  
** Upgrading ASDF, Replacing Preinstalled ASDF, and Loading from Source
No need. I use SBCL


* Configuration
  Probably not imporant to me. Skipping for now
  
* Using ASDF
** Loading a system
- (asdf:load-system :foo)

On some implementations, ASDF hooks into cl:require, ergo
- (require :foo)

The system-name is provided as a string, symbol, or keyword.
Lower case names by convention

** Convenience Functions  
*** Common Fn's
- `load-system`
- `compile-system`
- `test-system`
*** UnCommons
- `require-system`: skips loading already loades systems.
- `make`: a customizable way to load
- `operate`: arbitrarily operate on systems
  
See Doc link at the top of this org file for more info.

* Defining Systems
** defsystem

#+NAME: hello-lisp.asd
#+BEGIN_SRC lisp
(defsystem "hello-lisp"
  :description "hello-lisp: a sample Lisp system."
  :version "0.0.1"
  :author "Joe User <joe@example.com>"
  :licence "Public Domain"
  :depends-on ("optima.ppcre" "command-line-arguments")
  :components ((:file "packages")
               (:file "macros" :depends-on ("packages"))
               (:file "hello" :depends-on ("macros"))))
#+END_SRC

Notes
- defines system with 3 files; packages.lisp, macros.lisp, hello.lisp
- .lisp is implicit
- example has 2 external system dependencies
- :description, :version, :author, and :licence are needed for QuickLisp
- best to keep file as 1 top level form: `defsystem`
  

** More involved example

#+NAME: hello-lisp.asd
#+BEGIN_SRC lisp
(in-package :asdf-user)

(defsystem "foo"
  :version (:read-file-form "variables" :at (3 2))
  :components
  ((:file "package")
   (:file "variables" :depends-on ("package"))
   (:module "mod"
     :depends-on ("package")
     :serial t
     :components ((:file "utils")
                  (:file "reader")
                  (:file "cooker")
                  (:static-file "data.raw"))
     :output-files (compile-op (o c) (list "data.cooked"))
     :perform (compile-op :after (o c)
        (cook-data
         :in (component-pathname (find-component c "data.raw"))
         :out (first (output-files o c)))))
   (:file "foo" :depends-on ("mod"))))

(defmethod action-description
    ((o compile-op) (c (eql (find-component "foo" "mod"))))
  "cooking data")
#+END_SRC

*** Notes
- :module component is a collection of lisp and static files
- :static-file does not have implicit type
- :module files are located in subdirectory /mod
- :serial t, means that each file in module depends on prev file
  this means files will get recompiled when the files they depend on change

** defsystem grammer
See Doc link at top of this file for details.

* ASDF Object model

Key classes are `component` and `operation`

- component: individual source file or a group of source files and the products produced from it
- operation: a transformation that can be performed on a component
  
