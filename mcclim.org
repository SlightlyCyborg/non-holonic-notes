Notes on the [[https://common-lisp.net/project/mcclim/static/documents/mcclim.pdf][McClim Manual]]

* Introduction
  
CLIM is a multilayer graphics system that is customizable at each layer.

The top layer contains:
- application frames
- panes
- gadgets

** How CLIM is Different

CLIM is not just a GUI toolkit, it is an interface manager. 
It manages everything at the software boundary between human and machine. 

Traditional GUI has an event loop and events are sent to widgets which are handled by event handlers.

Event-driven programming is seen as a virtue by GUI builders, but events are sent in a null context and therefore must be combined in the widget or by some hack.

CLIM has an event loop, but the user of the application layer uses a command loop.

The command loop does the following:
- Acquires command. (click, key, etc)
- Command is populated by arguments.
- Command is called on the arguments.
- A display routine updates the view of the application logic.
  
Instead of attaching event handlers, a CLIM app dev does the following:
- write CLIM commands that modify application data independently of how the command is evoked.
- write display routines that turn the application data into visible representations
- write completion routines (what are these??? IDK)
- attach commands to view objects and decide how the commands get evoked.

  
* User manual
** Building McCLIM
*** Examples and demos
McCLIM source comes with some demos and applications
They are available in Examples and Apps subdirectories
- clim-demo:demodemo

*** Applications
- Apps/Listener
- Apps/Inspector
- Apps/Debugger
  
** The First Application
*** Terminology
- application-frame: top level app
- panes: blocks to patition gadgets
- gadgets: the objects in the screen
  
*** How McCLIM produces output
    
    CLIM panes record the series of operations that generates a pixel based output.

**** Simple application:
     No internal data structure to keep track of application objects. 
     It simply produces output as a result of running commands.

**** Application with a static display function
     Some applications use a display function.
     A game of tic tac toe would use a display function to draw the board.

**** Applications with a dynamic display function
     This has internal data structures that has a direct mapping to output.
     Commands modify the internal structure.
     The display function is run after each command loop iteration
     
**** Applications with an incremental static display function
     This uses `updating-output` to only update output when needded.
     
**** Programmer does it all
     This way requires the programmer to keep track of all output records on the display list and to inform CLIM about modifications to it..

*** Panes and Gadgets

CLIM apps are made from a heirarchy of panes and gadgets

Frequently used gadgets:
- buttons
- sliders

Frequently used panes
- hbox
- vbox
- hrack
  
*** A First Attempt
#+BEGIN_SRC lisp
(in-package :common-lisp-user)

(defpackage :my-first-app
;; Imports the appropriate CLIM library
(:use :clim :clim-lisp)

;; The package will only export a function to run the app
(:export run-my-first-app))

;; Good practice
(in-package :my-first-app)

;; Definition of the structure of a minimum app
(define-application-frame my-first-clim-app ()
  ()
;; This app only has 1 pane
  (:panes
    (my-interactor :interactor
    :height 400
    :width 600))
    ;; :layouts section describes how the pane is positioned inside
    ;; the application frame.
    ;; With 1 pane, no point getting complicated, Default is fine...
    (:layouts
	(my-default my-interactor)))
;; Now that the structure of the app is defined, need a function
;; to launch an instance of this app. (The user could run
;; several instances of the same app.)
(defun run-my-first-app ()
   (run-frame-top-level (make-application-frame ’my-first-clim-app)))
#+END_SRC

The app uses two packages: clim and clim-lisp
- The clim packages contains all symbols needed for using clim
- the clim-lisp package replaces the common-lisp package. why?

The main function ~run-my-first-app~ is exported

The define-application-frame takes the following arguments:
- the name of the app
- aditional superclasses
- list of CLOS slots to be added.

The current application frame instance is held in ~*application-frame*~

The rest of the definition contains ~:panes~ and ~:layouts~

Each pane has a name, a type, and some other options used to instantiate that particular type of pane.

In the example there is a pane called ~int~ of type ~interactor~ that is 400 units by 600 units. 

The ~:layouts~ element defines how to organize panes into a hierarchy. Default is used here because we only have 1 pane.


*** Adding Functionality
An ~application-pane~ is subclass of a ~stream~ where application objects are placed.

Here is an improved example:
#+BEGIN_SRC lisp
(in-package :common-lisp-user)

(defpackage :my-first-app
;; Imports the appropriate CLIM library
(:use :clim :clim-lisp)

;; The package will only export a function to run the app
(:export run-my-first-app))

;; Good practice
(in-package :my-first-app)

;; Definition of the structure of a minimum app
(define-application-frame superapp ()
  ()
  (:pointer-documentation t)
  (:panes
    (int :interactor
    :height 200
    :width 600))
    
    (app :application
       :display-time nil
       :height 400
       :width 600)

    (:layouts
       (default (vertically ()
                    app int)))
		    
    (define-superapp-command (com-quit :name t) ()
        (frame-exit *application-frame*))
	
    (define-superapp-command (com-parity :name t) ((number 'integer))
        (format t "~a is ~a~%" number
           (if (oddp number)
	     "odd"
	     "even"))))
;; Now that the structure of the app is defined, need a function
;; to launch an instance of this app. (The user could run
;; several instances of the same app.)
(defun run-my-first-app ()
   (run-frame-top-level (make-application-frame ’my-first-clim-app)))
#+END_SRC

A new app pane was added.

~:display-time nil~ tells the pane not to clear after each iteration of the command loop.
This is important because there is no ~display~ function defined, so nothing would have been displayed without this option.

~define-<name>-command~ just defines a command.

*** An application displaying a data structure

This example stores data in slots of the application frame. 
Then it uses a display function after each iteration of the command loop to display the data structure


#+BEGIN_SRC lisp
(in-package :common-lisp-user)

(defpackage "APP"
  (:use :clim :clim-lisp)
  (:export "APP-MAIN"))

(in-package :app)

(define-application-frame superapp ()
  ;; New addition of a slot to the application frame which
  ;; defines a application-specific slot.
  ;; The slot is simply a number.
  ((currrent-number :initform nil :accessor current-number))
  ;; The rest of the application frame is unchanged.
  (:pointer-documentation t)
  (:panes

    (app :application
      :height 400
      :width 600
      :display-function ’display-app)

    (int :interactor
      :height 200
      :width 600))

  (:layouts
    (default (vertically () app int))))

;; This is the function that will display the pane app.
;; Simply prints the number of the application frame slot
;; and whether it is odd or even.
;; Note that the print stream of format is pane.
(defun display-app (frame pane)
  (let ((number (current-number frame)))
    (format pane "~a is ~a" 
      number
      (cond ((null number) "not a number")
        ((oddp number) "odd")
        (t "even")))))

(define-superapp-command (com-quit :name t) ()
  (frame-exit *application-frame*))

(define-superapp-command (com-parity :name t) ((number ’integer))
  (setf (current-number *application-frame*) number))

(defun app-main ()
  (run-frame-top-level (make-application-frame ’superapp)))
#+END_SRC

The slot ~current-number~ was added and initialized to nil

Because there is a display function, there is no longer ~:display-time nil~

~:display-function ’display-app~ specifies the app frame's display function.

The command function ~com-parity~ now setf's the ~current-number~ on the ~*application-frame*~

*** Incremental display
    
The previous example always clears the screen and redraws it.

CLIM features a way to only redraw data that changes.

The way this feature works is by tagging a piece of output with a unique identity.
It then compares the tagged output with last iteration to determine if a redraw is neccisary.

#+begin_src lisp
(in-package :common-lisp-user)

(defpackage "APP"
  (:use :clim :clim-lisp)
  (:export "APP-MAIN"))

(in-package :app)

(define-application-frame superapp ()
  ((numbers :initform (loop repeat 20 collect (list (random 100000000)))
            :accessor numbers)
   (cursor :initform 0 :accessor cursor))
  (:pointer-documentation t)
  (:panes
    (app :application
         :height 400 :width 600
         :incremental-redisplay t
         :display-function 'display-app)
    (int :interactor :height 200 :width 600))
  (:layouts
    (default (vertically () app int))))

;; As usual, the displaying code relates to a pane, not the application frame.
(defun display-app (frame pane)

  (loop
     ;; taking items one-by-one from the frame slot 'numbers'
     for current-element in (numbers frame)

     ;; and increasing line-by-line
     for line from 0

     ;; prints a star if the cursor is on that line
     ;; (Note that here, there is no incremental redisplay. The output
     ;; record of the star will be printed at each call of the display
     ;; function -- that is at each iteration of the command loop.)
     do (princ (if (= (cursor frame) line) "*" " ") pane)

     ;; and incrementally updates the rendering instructions of the
     ;; number on that line
     ;; (Note that 'numbers' was defined as a list of lists, each
     ;; sublist holding an individual number. The reason for that is
     ;; explained below, but this is why (car current-element) is
     ;; needed.)
     do (updating-output (pane :unique-id   current-element
                               :id-test     #'eq
                               :cache-value (car current-element)
                               :cache-test  #'eql)
          (format pane "~a~%" (car current-element)))))


;;
;; Command definitions
;;

;; increase the value of the number on the current line
(define-superapp-command (com-add :name t) ((number 'integer))
  (incf (car (elt (numbers *application-frame*)
                  (cursor *application-frame*)))
        number))

;; move the cursor one line down (increasing the cursor position),
;; looping back to the beginning if going too far
(define-superapp-command (com-next :name t) ()
  (incf (cursor *application-frame*))
  (when (= (cursor *application-frame*)
           (length (numbers *application-frame*)))
    (setf (cursor *application-frame*) 0)))

;; move the cursor one line up
(define-superapp-command (com-previous :name t) ()
  (decf (cursor *application-frame*))
  (when (minusp (cursor *application-frame*))
    (setf (cursor *application-frame*)
          (1- (length (numbers *application-frame*))))))

;; Command to quit the app
(define-superapp-command (com-quit :name t) ()
  (frame-exit *application-frame*))


;; Exported function to launch an instance of the application frame
(defun app-main ()
(run-frame-top-level (make-application-frame 'superapp)))
#+end_src

Things to note:
- ~:incremental-redisplay t~ option in the app-pane
- ~:unique-id~ in ~updating-output~ points to the cons cell that the number is in
- ~:id-test~ uses ~#'eq~ to test if an output item has the same id as previous output item
- ~:cache-<value/test>~ used to store and test if an output item has changed

** Presentation types
*** What is a presentation type
Client code can choose to output graphical or textual representations of objs.
A presentation type has a name and parameters. 
Paramters can restrict type ~integer~ to be between a high and a low

*** A simple example
    
#+begin_src lisp :app
(in-package :common-lisp-user) 

(defpackage :app
  (:use :clim :clim-lisp)
  (:export #:app-main))

(in-package :app)

(define-application-frame superapp ()
  ()
  (:pointer-documentation t)
  (:panes
    (app :application :display-time t :height 300 :width 600)
    (int :interactor :height 200 :width 600))
  (:layouts
    (default (vertically () app int))))

(defun app-main ()
  (run-frame-top-level (make-application-frame 'superapp)))

(define-superapp-command (com-quit :name t) ()
  (frame-exit *application-frame*))

(define-presentation-type name-of-month ()
  :inherit-from 'string)

(define-presentation-type day-of-month ()
  :inherit-from 'integer)

(define-superapp-command (com-out :name t) ()
  (with-output-as-presentation (t "The third month" 'name-of-month)
    (format t "March~%"))
  (with-output-as-presentation (t 15 'day-of-month)
    (format t "fifteen~%")))

(define-superapp-command (com-get-date :name t)
    ((name 'name-of-month) (date 'day-of-month))
  (format (frame-standard-input *application-frame*)
"the ~a of ~a~%" date name))
#+end_src

#+RESULTS:
: COM-GET-DATE

~with-ouput-as-presentation~ associates some ouput with a presentation-type and an underlying object

So, the ~out~ command displays the presentation, then I can click the presentation and it is read in as the underlying object. Super awesome!

** Views

A view in CLIM seems to be similar to views in MVC.

Here is an example:

#+begin_src lisp :app
;;; part of application "business logic"
(defclass person ()
  ((%last-name :initarg :last-name :accessor last-name)
   (%first-name :initarg :first-name :accessor first-name)
   (%address :initarg :address :accessor address)
   (%membership-number :initarg :membership-number :reader membership-number)))

;;; constructor for the PERSON class.  Not strictly necessary. 
(defun make-person (last-name first-name address membership-number)
  (make-instance 'person 
                 :last-name last-name 
                 :first-name first-name
                 :address address
                 :membership-number membership-number))

;;; initial list of members of the organization we imagine for this example
(defparameter *members*
  (list (make-person "Doe" "Jane" "123, Glencoe Terrace" 12345)
        (make-person "Dupont" "Jean" "111, Rue de la Republique" 54321)
        (make-person "Smith" "Eliza" "22, Trafalgar Square" 121212)
        (make-person "Nilsson" "Sven" "Uppsalagatan 33" 98765)))

;;; the CLIM view class that corresponds to a list of members, one member
;;; per line of text in a CLIM application pane. 
(defclass members-view (view) ())

;;; since this view does not take any parameters in our simple example,
;;; we need only a single instance of it. 
(defparameter *members-view* (make-instance 'members-view))

;;; the application frame.  It contains instance-specific data
;;; such as the members of our organization. 
(define-application-frame views ()
  ((%members :initform *members* :accessor members))
  (:panes
   (main-pane :application :height 500 :width 500
              :display-function 'display-main-pane
              ;; notice the initialization of the default view of
              ;; the application pane. 
              :default-view *members-view*)
   (interactor :interactor :height 100 :width 500))
  (:layouts
   (default (vertically ()
              main-pane
              interactor))))

;;; the trick here is to define a generic display function
;;; that is called on the frame, the pane AND the view, 
;;; whereas the standard CLIM display functions are called 
;;; only on the frame and the pane.
(defgeneric display-pane-with-view (frame pane view))

;;; this is the display function that is called in each iteration
;;; of the CLIM command loop.  We simply call our own, more elaborate
;;; display function with the default view of the pane. 
(defun display-main-pane (frame pane)
  (display-pane-with-view frame pane (stream-default-view pane)))

;;; now we can start writing methods on our own display function
;;; for different views.  This one displays the data each member
;;; on a line of its own.
(defmethod display-pane-with-view (frame pane (view members-view))
  (loop for member in (members frame)
        do (with-output-as-presentation 
               (pane member 'person)
             (format pane "~a, ~a, ~a, ~a~%"
                     (membership-number member)
                     (last-name member)
                     (first-name member)
                     (address member)))))

;;; this CLIM view is used to display the information about
;;; a single person.  It has a slot that indicates what person
;;; we want to view. 
(defclass person-view (view)
  ((%person :initarg :person :reader person)))

;;; this method on our own display function shows the detailed 
;;; information of a single member. 
(defmethod display-pane-with-view (frame pane (view person-view))
  (let ((person (person view)))
    (format pane "Last name: ~a~%First Name: ~a~%Address: ~a~%Membership Number: ~a~%"
            (last-name person)
            (first-name person)
            (address person)
            (membership-number person))))

;;; entry point to start our applciation
(defun views-example ()
  (run-frame-top-level (make-application-frame 'views)))

;;; command to quit the application 
(define-views-command (com-quit :name t) ()
  (frame-exit *application-frame*))

;;; command to switch the default view of the application pane
;;; (which is the value of *standard-output*) to the one that
;;; shows a member per line. 
(define-views-command (com-show-all :name t) ()
  (setf (stream-default-view *standard-output*) *members-view*))
    
;;; command to switch to a view that displays a single member. 
;;; this command takes as an argument the person to display.  
;;; In this application, the only way to satisfy the demand for
;;; the argument is to click on a line of the members view.  In 
;;; more elaborate application, you might be able to type a
;;; textual representation (using completion) of the person. 
(define-views-command (com-show-person :name t) ((person 'person))
  (setf (stream-default-view *standard-output*)
        (make-instance 'person-view :person person)))

#+end_src

In this example, there is only 1 pane and 2 views are used to display 2 different sets of data on the pane using 2 different display methods

~member-view~ is just an empty class to differentiate a method on
~person-view~ class is a view with additional slots for the person to be shown.

~stream-default-view~ is a method that accepts a pane and gets its current default view

The pane display method fetches the default view and displays it.

The view switching method ~display-pane-with-view~ is specialized for a person and a member view.

View-switching by saving the new view into ~default-view~ slot and fetching it in the display method with ~stream-default-view~ seems like a hack.

Why not use a variable called ~current-view~?

** Command Tables

A command table is an object used to determine which commands are available in a specific context.

A default command table is defined when ~define-application-frame~ is called.

Each command table has a name and can be found (and setf?) using ~(clim:find-command-table (name &key (errorp t)))~

** Menu Bar

Menubar creation is easy

#+begin_src lisp
(clim:define-application-frame foo ()
  ;;...
  (:menu-bar t)
  ;;...
  )
#+end_src

Menu bar can be changed by changing the ~command-table~ associated with the current frame

#+begin_src lisp
(setf (frame-command-table *application-frame*)
      new-command-table)
#+end_src

~clim:add-menu-item-to-command-table~ can be used to add menu items.

~clim:remove-menu-item-from-command-table~ is the inverse.

